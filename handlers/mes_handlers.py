import asyncio
from time import sleep
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto
from database.model import Users, Events, Product
from keyboards.buttons import main_menu_btn, price_btn_reply, cancel_btn
from parsers.rate import currency_rates
from states.finite_state_machine import UserMenu, PriceInputSteps


# commands=['start', 'run']
async def send_start(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    user = Users.get_or_none(Users.user_id == user_id)
    await state.set_state(UserMenu.main_menu)
    if user is None:
        Users.create(
            user_id=user_id,
            first_name=first_name,
            last_name=last_name,
        )
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n—è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ –Ω–∏—Ö –¥–∞–Ω–Ω—ã–µ',
                             reply_markup=main_menu_btn())
    else:
        await message.answer(text='—Ä–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å', reply_markup=main_menu_btn())
    Events.info_user_action(f'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {first_name}')


# commands=['info'], state=UserMenu()
async def info(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    info_messages = {
        'main_menu': "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
                     "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                     "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–ª–µ–≤–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                     "–ö–æ–º–∞–Ω–¥–∞ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º(–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞)\n"
                     "–ö–æ–º–∞–Ω–¥–∞ /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                     "–ö–æ–º–∞–Ω–¥–∞ /info - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n"
                     "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ USD –∏ –ï–≤—Ä–æ EUR:\n"
                     "–∫–Ω–æ–ø–∫–∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å"
                     "–ù–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:"
                     "–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",

        'parser_menu': '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"\n'
                       '–í —ç—Ç–æ–º –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ:\n'
                       '–ö–Ω–æ–ø–∫–∞ "low" - —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n'
                       '–ö–Ω–æ–ø–∫–∞ "high" - —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n'
                       '–ö–Ω–æ–ø–∫–∞ "custom" - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –æ—Ç –∏ –¥–æ'

    }
    if current_state == UserMenu.main_menu:
        await message.answer(text=f"{info_messages['main_menu']}")
    else:
        await message.answer(text=f"{info_messages['parser_menu']}")


# commands=['help'], state=UserMenu()
async def bot_help(message: types.Message):
    await message.answer(text=" –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ\n"
                              "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                              "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                              "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                              "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
                              "/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—Å—è—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤"
                         )


# commands=['history'], state=UserMenu()
async def get_history(message: types.Message):
    res = Events.get_request_history()
    for i in res:
        await message.answer(text=f"\n{i}\n")
        await asyncio.sleep(0.1)


# GreetingFilter(F.text), state=UserMenu())
async def bot_welcome(message: types.Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}')


async def photo_handler(message: types.Message):
    """ –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    await message.answer('–ö—Ä—É—Ç–∞—è —Ñ–æ—Ç–∫–∞')


# F.text == 'üõí –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', state=UserMenu.main_menu
async def cmd_search(message: types.Message, state: FSMContext):
    Events.info_user_action('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"')
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ '
                              '–¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /info', reply_markup=price_btn_reply())
    await state.set_state(UserMenu.parser_menu)


# F.text == 'üìâ low', state=UserMenu.parser_menu
async def price_min(message: types.Message, state: FSMContext):
    min_price = Product.get_min_price()
    Events.info_request('–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞')
    await message.answer(text='–¢–æ–≤–∞—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é')
    await message.answer_photo(
        photo=min_price.image,
        caption=f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\n{min_price.name}\n\n–¶–µ–Ω–∞: {min_price.price}'
    )
    await state.set_state(UserMenu.parser_menu)


# F.text == 'üìà high', state=UserMenu.parser_menu
async def price_max(message: types.Message, state: FSMContext):
    max_price = Product.get_product_with_max_price()
    Events.info_request('–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é')
    await message.answer(text='–¢–æ–≤–∞—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é')
    await message.answer_photo(photo=max_price.image,
                               caption=f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\n{max_price.name}\n\n–¶–µ–Ω–∞: {max_price.price}')
    await state.set_state(UserMenu.parser_menu)


# F.text == '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', state=UserMenu.parser_menu
async def send_back(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=main_menu_btn())
    await state.set_state(UserMenu.main_menu)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# F.text == 'üìä custom', state=UserMenu.parser_menu
async def prices_from_and_to(message: types.Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:')
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω:', reply_markup=cancel_btn)
    await state.set_state(PriceInputSteps.input_min_price)


# F.text == '–û—Ç–º–µ–Ω–∞ ‚ùé', state=(PriceInputSteps.input_price, PriceInputSteps.input_max_price))
async def cancel(message: types.Message, state: FSMContext):
    await message.answer(text="–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=price_btn_reply())
    await state.set_state(UserMenu.parser_menu)


# (lambda mes: not mes.text.isdigit(), state=(PriceInputSteps.input_price, PriceInputSteps.input_max_price))
async def input_validation(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


#  (lambda mes: mes.text.isdigit(), state=PriceInputSteps.input_price)
async def on_min_price(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_input = await state.update_data({'user_input': message.text})

    await message.answer(f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ "{message.text}"')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω:', reply_markup=cancel_btn)
    await state.set_state(PriceInputSteps.input_max_price)


# (lambda mes: mes.text.isdigit(), state=PriceInputSteps.input_max_price)
async def on_max_price(message: types.Message, state: FSMContext, bot: Bot):

    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤–≤–æ–¥ –Ω–∏–∂–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    user_data = await state.get_data()

    user_max_number = int(message.text)

    if user_max_number <= int(user_data['user_input']):
        await message.answer(f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∏–∂–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "{user_data["user_input"]}"')
    else:
        Events.info_request(f'–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {user_data["user_input"]} –¥–æ {user_max_number} ')
        product_list = Product.get_product_from_and_to(user_data['user_input'], user_max_number)

        await message.answer(text=f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ "{message.text}"')

        if product_list:
            await message.answer(text=f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä—ã')
            await message.answer(text=f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É')
            for i_list in product_list:
                product_media = [InputMediaPhoto(type='photo',
                                                 media=product.image,
                                                 caption=f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\n{product.name}\n\n–¶–µ–Ω–∞: {product.price}')
                                 for product in i_list]

                await bot.send_media_group(message.from_user.id, media=product_media)
            await message.answer(text="–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞", reply_markup=price_btn_reply())
        else:
            await message.answer(text=f'–¢–æ–≤–∞—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {user_data["user_input"]} –¥–æ {user_max_number} –Ω–µ—Ç', reply_markup=price_btn_reply())
        await state.set_state(UserMenu.parser_menu)


async def cmd_rates(message: types.Message):
    sleep(1)
    data = currency_rates
    request_rates = '–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∞–ª—é—Ç'
    Events.info_request(request_rates)
    await message.answer(data)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥—Ä—É–≥–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤.
async def send_echo(message: types.Message):
    await message.answer(text='–Ø –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É "/help"')
